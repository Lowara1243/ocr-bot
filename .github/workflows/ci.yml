name: CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-and-lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install uv CLI
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Cache uv downloads
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-uv-

      - name: Create virtual environment via uv
        run: uv venv

      - name: Install dependencies
        run: uv pip install ".[dev]"

      - name: Lint with Ruff
        run: uv run ruff check .

      - name: Check formatting with Ruff
        run: uv run ruff format --check .

      - name: Debug environment
        run: |
          echo "Current working directory: $(pwd)"
          echo "PYTHONPATH: $PYTHONPATH"
          echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"

      - name: Load .env.test for tests
        run: cat src/ocr_bot/tests/.env.test >> $GITHUB_ENV

      - name: Run tests
        run: |
          export PYTHONPATH=$GITHUB_WORKSPACE
          uv run pytest src/ocr_bot/tests/

  build-docker:
    needs: test-and-lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Clean Docker build cache
        run: docker buildx prune -af

      - name: Build Docker image
        run: docker build -t ocr-bot:latest .

      - name: Get project version
        id: get_version
        run: echo "VERSION=$(grep -m 1 version pyproject.toml | cut -d '"' -f 2)" >> $GITHUB_OUTPUT

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Tag and push to Docker Hub
        run: |
          docker tag ocr-bot:latest ${{ secrets.DOCKERHUB_USERNAME }}/ocr-bot:${{ steps.get_version.outputs.VERSION }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/ocr-bot:${{ steps.get_version.outputs.VERSION }}
          docker tag ocr-bot:latest ${{ secrets.DOCKERHUB_USERNAME }}/ocr-bot:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/ocr-bot:latest